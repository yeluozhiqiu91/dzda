// Generated by swift-generator from dzda/rolesresource.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("RolesResource")
public final class RolesResource  implements Serializable
{
    public RolesResource() {
    }

    private int rrId;

    @ThriftField(value=1, name="rrId", requiredness=Requiredness.NONE)
    public int getRrId() { return rrId; }

    @ThriftField
    public void setRrId(final int rrId) { this.rrId = rrId; }

    private int rolesId;

    @ThriftField(value=2, name="rolesId", requiredness=Requiredness.NONE)
    public int getRolesId() { return rolesId; }

    @ThriftField
    public void setRolesId(final int rolesId) { this.rolesId = rolesId; }

    private int resourceId;

    @ThriftField(value=3, name="resourceId", requiredness=Requiredness.NONE)
    public int getResourceId() { return resourceId; }

    @ThriftField
    public void setResourceId(final int resourceId) { this.resourceId = resourceId; }

    private int type;

    @ThriftField(value=4, name="type", requiredness=Requiredness.NONE)
    public int getType() { return type; }

    @ThriftField
    public void setType(final int type) { this.type = type; }

    private int createUser;

    @ThriftField(value=5, name="createUser", requiredness=Requiredness.NONE)
    public int getCreateUser() { return createUser; }

    @ThriftField
    public void setCreateUser(final int createUser) { this.createUser = createUser; }

    private String createDate;

    @ThriftField(value=6, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("rrId", rrId)
            .add("rolesId", rolesId)
            .add("resourceId", resourceId)
            .add("type", type)
            .add("createUser", createUser)
            .add("createDate", createDate)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        RolesResource other = (RolesResource)o;

        return
            Objects.equals(rrId, other.rrId) &&
            Objects.equals(rolesId, other.rolesId) &&
            Objects.equals(resourceId, other.resourceId) &&
            Objects.equals(type, other.type) &&
            Objects.equals(createUser, other.createUser) &&
            Objects.equals(createDate, other.createDate);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            rrId,
            rolesId,
            resourceId,
            type,
            createUser,
            createDate
        });
    }
}
