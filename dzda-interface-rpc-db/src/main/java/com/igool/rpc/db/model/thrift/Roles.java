// Generated by swift-generator from dzda/roles.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Roles")
public final class Roles  implements Serializable
{
    public Roles() {
    }

    private int rolesId;

    @ThriftField(value=1, name="rolesId", requiredness=Requiredness.NONE)
    public int getRolesId() { return rolesId; }

    @ThriftField
    public void setRolesId(final int rolesId) { this.rolesId = rolesId; }

    private String code;

    @ThriftField(value=2, name="code", requiredness=Requiredness.NONE)
    public String getCode() { return code; }

    @ThriftField
    public void setCode(final String code) { this.code = code; }

    private String name;

    @ThriftField(value=3, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    private String remarks;

    @ThriftField(value=4, name="remarks", requiredness=Requiredness.NONE)
    public String getRemarks() { return remarks; }

    @ThriftField
    public void setRemarks(final String remarks) { this.remarks = remarks; }

    private int type;

    @ThriftField(value=5, name="type", requiredness=Requiredness.NONE)
    public int getType() { return type; }

    @ThriftField
    public void setType(final int type) { this.type = type; }

    private int createUser;

    @ThriftField(value=6, name="createUser", requiredness=Requiredness.NONE)
    public int getCreateUser() { return createUser; }

    @ThriftField
    public void setCreateUser(final int createUser) { this.createUser = createUser; }

    private String createDate;

    @ThriftField(value=7, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    private int status;

    @ThriftField(value=8, name="status", requiredness=Requiredness.NONE)
    public int getStatus() { return status; }

    @ThriftField
    public void setStatus(final int status) { this.status = status; }

    private int updateUser;

    @ThriftField(value=9, name="updateUser", requiredness=Requiredness.NONE)
    public int getUpdateUser() { return updateUser; }

    @ThriftField
    public void setUpdateUser(final int updateUser) { this.updateUser = updateUser; }

    private String updateDate;

    @ThriftField(value=10, name="updateDate", requiredness=Requiredness.NONE)
    public String getUpdateDate() { return updateDate; }

    @ThriftField
    public void setUpdateDate(final String updateDate) { this.updateDate = updateDate; }

    private int isSelected;

    @ThriftField(value=11, name="isSelected", requiredness=Requiredness.NONE)
    public int getIsSelected() { return isSelected; }

    @ThriftField
    public void setIsSelected(final int isSelected) { this.isSelected = isSelected; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("rolesId", rolesId)
            .add("code", code)
            .add("name", name)
            .add("remarks", remarks)
            .add("type", type)
            .add("createUser", createUser)
            .add("createDate", createDate)
            .add("status", status)
            .add("updateUser", updateUser)
            .add("updateDate", updateDate)
            .add("isSelected", isSelected)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Roles other = (Roles)o;

        return
            Objects.equals(rolesId, other.rolesId) &&
            Objects.equals(code, other.code) &&
            Objects.equals(name, other.name) &&
            Objects.equals(remarks, other.remarks) &&
            Objects.equals(type, other.type) &&
            Objects.equals(createUser, other.createUser) &&
            Objects.equals(createDate, other.createDate) &&
            Objects.equals(status, other.status) &&
            Objects.equals(updateUser, other.updateUser) &&
            Objects.equals(updateDate, other.updateDate) &&
            Objects.equals(isSelected, other.isSelected);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            rolesId,
            code,
            name,
            remarks,
            type,
            createUser,
            createDate,
            status,
            updateUser,
            updateDate,
            isSelected
        });
    }
}
