// Generated by swift-generator from dzda/imagephotorel.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ImagePhotoRel")
public final class ImagePhotoRel  implements Serializable
{
    public ImagePhotoRel() {
    }

    private long ipId;

    @ThriftField(value=1, name="ipId", requiredness=Requiredness.NONE)
    public long getIpId() { return ipId; }

    @ThriftField
    public void setIpId(final long ipId) { this.ipId = ipId; }

    private int imageId;

    @ThriftField(value=2, name="imageId", requiredness=Requiredness.NONE)
    public int getImageId() { return imageId; }

    @ThriftField
    public void setImageId(final int imageId) { this.imageId = imageId; }

    private int btdId;

    @ThriftField(value=3, name="btdId", requiredness=Requiredness.NONE)
    public int getBtdId() { return btdId; }

    @ThriftField
    public void setBtdId(final int btdId) { this.btdId = btdId; }

    private String photo;

    @ThriftField(value=4, name="photo", requiredness=Requiredness.NONE)
    public String getPhoto() { return photo; }

    @ThriftField
    public void setPhoto(final String photo) { this.photo = photo; }

    private int orderNum;

    @ThriftField(value=5, name="orderNum", requiredness=Requiredness.NONE)
    public int getOrderNum() { return orderNum; }

    @ThriftField
    public void setOrderNum(final int orderNum) { this.orderNum = orderNum; }

    private String url;

    @ThriftField(value=6, name="url", requiredness=Requiredness.NONE)
    public String getUrl() { return url; }

    @ThriftField
    public void setUrl(final String url) { this.url = url; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("ipId", ipId)
            .add("imageId", imageId)
            .add("btdId", btdId)
            .add("photo", photo)
            .add("orderNum", orderNum)
            .add("url", url)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ImagePhotoRel other = (ImagePhotoRel)o;

        return
            Objects.equals(ipId, other.ipId) &&
            Objects.equals(imageId, other.imageId) &&
            Objects.equals(btdId, other.btdId) &&
            Objects.equals(photo, other.photo) &&
            Objects.equals(orderNum, other.orderNum) &&
            Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            ipId,
            imageId,
            btdId,
            photo,
            orderNum,
            url
        });
    }
}
