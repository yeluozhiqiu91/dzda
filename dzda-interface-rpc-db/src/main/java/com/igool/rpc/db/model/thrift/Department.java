// Generated by swift-generator from dzda/departmentinfo.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Department")
public final class Department  implements Serializable
{
    public Department() {
    }

    private int departmentId;

    @ThriftField(value=1, name="departmentId", requiredness=Requiredness.NONE)
    public int getDepartmentId() { return departmentId; }

    @ThriftField
    public void setDepartmentId(final int departmentId) { this.departmentId = departmentId; }

    private String name;

    @ThriftField(value=2, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    private String code;

    @ThriftField(value=3, name="code", requiredness=Requiredness.NONE)
    public String getCode() { return code; }

    @ThriftField
    public void setCode(final String code) { this.code = code; }

    private int parentId;

    @ThriftField(value=4, name="parentId", requiredness=Requiredness.NONE)
    public int getParentId() { return parentId; }

    @ThriftField
    public void setParentId(final int parentId) { this.parentId = parentId; }

    private int sort;

    @ThriftField(value=5, name="sort", requiredness=Requiredness.NONE)
    public int getSort() { return sort; }

    @ThriftField
    public void setSort(final int sort) { this.sort = sort; }

    private String remarks;

    @ThriftField(value=6, name="remarks", requiredness=Requiredness.NONE)
    public String getRemarks() { return remarks; }

    @ThriftField
    public void setRemarks(final String remarks) { this.remarks = remarks; }

    private int createUser;

    @ThriftField(value=7, name="createUser", requiredness=Requiredness.NONE)
    public int getCreateUser() { return createUser; }

    @ThriftField
    public void setCreateUser(final int createUser) { this.createUser = createUser; }

    private String createDate;

    @ThriftField(value=8, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    private int status;

    @ThriftField(value=9, name="status", requiredness=Requiredness.NONE)
    public int getStatus() { return status; }

    @ThriftField
    public void setStatus(final int status) { this.status = status; }

    private int delUser;

    @ThriftField(value=10, name="delUser", requiredness=Requiredness.NONE)
    public int getDelUser() { return delUser; }

    @ThriftField
    public void setDelUser(final int delUser) { this.delUser = delUser; }

    private String delDate;

    @ThriftField(value=11, name="delDate", requiredness=Requiredness.NONE)
    public String getDelDate() { return delDate; }

    @ThriftField
    public void setDelDate(final String delDate) { this.delDate = delDate; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("departmentId", departmentId)
            .add("name", name)
            .add("code", code)
            .add("parentId", parentId)
            .add("sort", sort)
            .add("remarks", remarks)
            .add("createUser", createUser)
            .add("createDate", createDate)
            .add("status", status)
            .add("delUser", delUser)
            .add("delDate", delDate)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Department other = (Department)o;

        return
            Objects.equals(departmentId, other.departmentId) &&
            Objects.equals(name, other.name) &&
            Objects.equals(code, other.code) &&
            Objects.equals(parentId, other.parentId) &&
            Objects.equals(sort, other.sort) &&
            Objects.equals(remarks, other.remarks) &&
            Objects.equals(createUser, other.createUser) &&
            Objects.equals(createDate, other.createDate) &&
            Objects.equals(status, other.status) &&
            Objects.equals(delUser, other.delUser) &&
            Objects.equals(delDate, other.delDate);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            departmentId,
            name,
            code,
            parentId,
            sort,
            remarks,
            createUser,
            createDate,
            status,
            delUser,
            delDate
        });
    }
}
