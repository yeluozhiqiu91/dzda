// Generated by swift-generator from dzda/rolesjurisdictionrel.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("RolesJurisdictionRel")
public final class RolesJurisdictionRel  implements Serializable
{
    public RolesJurisdictionRel() {
    }

    private int roleJurisdictionId;

    @ThriftField(value=1, name="roleJurisdictionId", requiredness=Requiredness.NONE)
    public int getRoleJurisdictionId() { return roleJurisdictionId; }

    @ThriftField
    public void setRoleJurisdictionId(final int roleJurisdictionId) { this.roleJurisdictionId = roleJurisdictionId; }

    private int rolesId;

    @ThriftField(value=2, name="rolesId", requiredness=Requiredness.NONE)
    public int getRolesId() { return rolesId; }

    @ThriftField
    public void setRolesId(final int rolesId) { this.rolesId = rolesId; }

    private int jurisdictionId;

    @ThriftField(value=3, name="jurisdictionId", requiredness=Requiredness.NONE)
    public int getJurisdictionId() { return jurisdictionId; }

    @ThriftField
    public void setJurisdictionId(final int jurisdictionId) { this.jurisdictionId = jurisdictionId; }

    private int createUser;

    @ThriftField(value=4, name="createUser", requiredness=Requiredness.NONE)
    public int getCreateUser() { return createUser; }

    @ThriftField
    public void setCreateUser(final int createUser) { this.createUser = createUser; }

    private String createDate;

    @ThriftField(value=5, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("roleJurisdictionId", roleJurisdictionId)
            .add("rolesId", rolesId)
            .add("jurisdictionId", jurisdictionId)
            .add("createUser", createUser)
            .add("createDate", createDate)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        RolesJurisdictionRel other = (RolesJurisdictionRel)o;

        return
            Objects.equals(roleJurisdictionId, other.roleJurisdictionId) &&
            Objects.equals(rolesId, other.rolesId) &&
            Objects.equals(jurisdictionId, other.jurisdictionId) &&
            Objects.equals(createUser, other.createUser) &&
            Objects.equals(createDate, other.createDate);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            roleJurisdictionId,
            rolesId,
            jurisdictionId,
            createUser,
            createDate
        });
    }
}
