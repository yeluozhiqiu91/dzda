// Generated by swift-generator from dzda/imageinfo.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("UserImageCount")
public final class UserImageCount  implements Serializable
{
    public UserImageCount() {
    }

    private int userId;

    @ThriftField(value=1, name="userId", requiredness=Requiredness.NONE)
    public int getUserId() { return userId; }

    @ThriftField
    public void setUserId(final int userId) { this.userId = userId; }

    private String manageDept;

    @ThriftField(value=2, name="manageDept", requiredness=Requiredness.NONE)
    public String getManageDept() { return manageDept; }

    @ThriftField
    public void setManageDept(final String manageDept) { this.manageDept = manageDept; }

    private String imageUser;

    @ThriftField(value=3, name="imageUser", requiredness=Requiredness.NONE)
    public String getImageUser() { return imageUser; }

    @ThriftField
    public void setImageUser(final String imageUser) { this.imageUser = imageUser; }

    private String imageUserName;

    @ThriftField(value=4, name="imageUserName", requiredness=Requiredness.NONE)
    public String getImageUserName() { return imageUserName; }

    @ThriftField
    public void setImageUserName(final String imageUserName) { this.imageUserName = imageUserName; }

    private int businessNum;

    @ThriftField(value=5, name="businessNum", requiredness=Requiredness.NONE)
    public int getBusinessNum() { return businessNum; }

    @ThriftField
    public void setBusinessNum(final int businessNum) { this.businessNum = businessNum; }

    private int driverNum;

    @ThriftField(value=6, name="driverNum", requiredness=Requiredness.NONE)
    public int getDriverNum() { return driverNum; }

    @ThriftField
    public void setDriverNum(final int driverNum) { this.driverNum = driverNum; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("userId", userId)
            .add("manageDept", manageDept)
            .add("imageUser", imageUser)
            .add("imageUserName", imageUserName)
            .add("businessNum", businessNum)
            .add("driverNum", driverNum)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        UserImageCount other = (UserImageCount)o;

        return
            Objects.equals(userId, other.userId) &&
            Objects.equals(manageDept, other.manageDept) &&
            Objects.equals(imageUser, other.imageUser) &&
            Objects.equals(imageUserName, other.imageUserName) &&
            Objects.equals(businessNum, other.businessNum) &&
            Objects.equals(driverNum, other.driverNum);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            userId,
            manageDept,
            imageUser,
            imageUserName,
            businessNum,
            driverNum
        });
    }
}
