// Generated by swift-generator from dzda/imagedetaildto.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ImageDetailDTO")
public final class ImageDetailDTO  implements Serializable
{
    public ImageDetailDTO() {
    }

    private String plateNo;

    @ThriftField(value=1, name="plateNo", requiredness=Requiredness.NONE)
    public String getPlateNo() { return plateNo; }

    @ThriftField
    public void setPlateNo(final String plateNo) { this.plateNo = plateNo; }

    private String number;

    @ThriftField(value=2, name="number", requiredness=Requiredness.NONE)
    public String getNumber() { return number; }

    @ThriftField
    public void setNumber(final String number) { this.number = number; }

    private String name;

    @ThriftField(value=3, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    private String time;

    @ThriftField(value=4, name="time", requiredness=Requiredness.NONE)
    public String getTime() { return time; }

    @ThriftField
    public void setTime(final String time) { this.time = time; }

    private List<ImageDetail> pic;

    @ThriftField(value=5, name="pic", requiredness=Requiredness.NONE)
    public List<ImageDetail> getPic() { return pic; }

    @ThriftField
    public void setPic(final List<ImageDetail> pic) { this.pic = pic; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("plateNo", plateNo)
            .add("number", number)
            .add("name", name)
            .add("time", time)
            .add("pic", pic)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ImageDetailDTO other = (ImageDetailDTO)o;

        return
            Objects.equals(plateNo, other.plateNo) &&
            Objects.equals(number, other.number) &&
            Objects.equals(name, other.name) &&
            Objects.equals(time, other.time) &&
            Objects.equals(pic, other.pic);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            plateNo,
            number,
            name,
            time,
            pic
        });
    }
}
