// Generated by swift-generator from dzda/dictionary.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("Dictionary")
public final class Dictionary  implements Serializable
{
    public Dictionary() {
    }

    private String id;

    @ThriftField(value=1, name="id", requiredness=Requiredness.NONE)
    public String getId() { return id; }

    @ThriftField
    public void setId(final String id) { this.id = id; }

    private String name;

    @ThriftField(value=2, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    private String value;

    @ThriftField(value=3, name="value", requiredness=Requiredness.NONE)
    public String getValue() { return value; }

    @ThriftField
    public void setValue(final String value) { this.value = value; }

    private String type;

    @ThriftField(value=4, name="type", requiredness=Requiredness.NONE)
    public String getType() { return type; }

    @ThriftField
    public void setType(final String type) { this.type = type; }

    private String createTime;

    @ThriftField(value=5, name="createTime", requiredness=Requiredness.NONE)
    public String getCreateTime() { return createTime; }

    @ThriftField
    public void setCreateTime(final String createTime) { this.createTime = createTime; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("id", id)
            .add("name", name)
            .add("value", value)
            .add("type", type)
            .add("createTime", createTime)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Dictionary other = (Dictionary)o;

        return
            Objects.equals(id, other.id) &&
            Objects.equals(name, other.name) &&
            Objects.equals(value, other.value) &&
            Objects.equals(type, other.type) &&
            Objects.equals(createTime, other.createTime);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            name,
            value,
            type,
            createTime
        });
    }
}
