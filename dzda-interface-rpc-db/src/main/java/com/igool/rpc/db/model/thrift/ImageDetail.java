// Generated by swift-generator from dzda/imagedetail.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ImageDetail")
public final class ImageDetail  implements Serializable
{
    public ImageDetail() {
    }

    private String src;

    @ThriftField(value=1, name="src", requiredness=Requiredness.NONE)
    public String getSrc() { return src; }

    @ThriftField
    public void setSrc(final String src) { this.src = src; }

    private String name;

    @ThriftField(value=2, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    private String imageCode;

    @ThriftField(value=3, name="imageCode", requiredness=Requiredness.NONE)
    public String getImageCode() { return imageCode; }

    @ThriftField
    public void setImageCode(final String imageCode) { this.imageCode = imageCode; }

    private String primarySrc;

    @ThriftField(value=4, name="primarySrc", requiredness=Requiredness.NONE)
    public String getPrimarySrc() { return primarySrc; }

    @ThriftField
    public void setPrimarySrc(final String primarySrc) { this.primarySrc = primarySrc; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("src", src)
            .add("name", name)
            .add("imageCode", imageCode)
            .add("primarySrc", primarySrc)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ImageDetail other = (ImageDetail)o;

        return
            Objects.equals(src, other.src) &&
            Objects.equals(name, other.name) &&
            Objects.equals(imageCode, other.imageCode) &&
            Objects.equals(primarySrc, other.primarySrc);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            src,
            name,
            imageCode,
            primarySrc
        });
    }
}
