// Generated by swift-generator from dzda/findregister.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("FindRegister")
public final class FindRegister  implements Serializable
{
    public FindRegister() {
    }

    private int id;

    @ThriftField(value=1, name="id", requiredness=Requiredness.NONE)
    public int getId() { return id; }

    @ThriftField
    public void setId(final int id) { this.id = id; }

    private int userId;

    @ThriftField(value=2, name="userId", requiredness=Requiredness.NONE)
    public int getUserId() { return userId; }

    @ThriftField
    public void setUserId(final int userId) { this.userId = userId; }

    private String createTime;

    @ThriftField(value=3, name="createTime", requiredness=Requiredness.NONE)
    public String getCreateTime() { return createTime; }

    @ThriftField
    public void setCreateTime(final String createTime) { this.createTime = createTime; }

    private String unitName;

    @ThriftField(value=4, name="unitName", requiredness=Requiredness.NONE)
    public String getUnitName() { return unitName; }

    @ThriftField
    public void setUnitName(final String unitName) { this.unitName = unitName; }

    private String letSfz;

    @ThriftField(value=5, name="letSfz", requiredness=Requiredness.NONE)
    public String getLetSfz() { return letSfz; }

    @ThriftField
    public void setLetSfz(final String letSfz) { this.letSfz = letSfz; }

    private int type;

    @ThriftField(value=6, name="type", requiredness=Requiredness.NONE)
    public int getType() { return type; }

    @ThriftField
    public void setType(final int type) { this.type = type; }

    private String carSfz;

    @ThriftField(value=7, name="carSfz", requiredness=Requiredness.NONE)
    public String getCarSfz() { return carSfz; }

    @ThriftField
    public void setCarSfz(final String carSfz) { this.carSfz = carSfz; }

    private String hphm;

    @ThriftField(value=8, name="hphm", requiredness=Requiredness.NONE)
    public String getHphm() { return hphm; }

    @ThriftField
    public void setHphm(final String hphm) { this.hphm = hphm; }

    private String hpzl;

    @ThriftField(value=9, name="hpzl", requiredness=Requiredness.NONE)
    public String getHpzl() { return hpzl; }

    @ThriftField
    public void setHpzl(final String hpzl) { this.hpzl = hpzl; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("id", id)
            .add("userId", userId)
            .add("createTime", createTime)
            .add("unitName", unitName)
            .add("letSfz", letSfz)
            .add("type", type)
            .add("carSfz", carSfz)
            .add("hphm", hphm)
            .add("hpzl", hpzl)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        FindRegister other = (FindRegister)o;

        return
            Objects.equals(id, other.id) &&
            Objects.equals(userId, other.userId) &&
            Objects.equals(createTime, other.createTime) &&
            Objects.equals(unitName, other.unitName) &&
            Objects.equals(letSfz, other.letSfz) &&
            Objects.equals(type, other.type) &&
            Objects.equals(carSfz, other.carSfz) &&
            Objects.equals(hphm, other.hphm) &&
            Objects.equals(hpzl, other.hpzl);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            userId,
            createTime,
            unitName,
            letSfz,
            type,
            carSfz,
            hphm,
            hpzl
        });
    }
}
