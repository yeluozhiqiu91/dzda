// Generated by swift-generator from dzda/imageinfo.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("ImageInfo")
public final class ImageInfo  implements Serializable
{
    public ImageInfo() {
    }

    private int imageId;

    @ThriftField(value=1, name="imageId", requiredness=Requiredness.NONE)
    public int getImageId() { return imageId; }

    @ThriftField
    public void setImageId(final int imageId) { this.imageId = imageId; }

    private String code;

    @ThriftField(value=2, name="code", requiredness=Requiredness.NONE)
    public String getCode() { return code; }

    @ThriftField
    public void setCode(final String code) { this.code = code; }

    private int status;

    @ThriftField(value=3, name="status", requiredness=Requiredness.NONE)
    public int getStatus() { return status; }

    @ThriftField
    public void setStatus(final int status) { this.status = status; }

    private String applicationDate;

    @ThriftField(value=4, name="applicationDate", requiredness=Requiredness.NONE)
    public String getApplicationDate() { return applicationDate; }

    @ThriftField
    public void setApplicationDate(final String applicationDate) { this.applicationDate = applicationDate; }

    private int businessTypeInfoId;

    @ThriftField(value=5, name="businessTypeInfoId", requiredness=Requiredness.NONE)
    public int getBusinessTypeInfoId() { return businessTypeInfoId; }

    @ThriftField
    public void setBusinessTypeInfoId(final int businessTypeInfoId) { this.businessTypeInfoId = businessTypeInfoId; }

    private int version;

    @ThriftField(value=6, name="version", requiredness=Requiredness.NONE)
    public int getVersion() { return version; }

    @ThriftField
    public void setVersion(final int version) { this.version = version; }

    private String node;

    @ThriftField(value=7, name="node", requiredness=Requiredness.NONE)
    public String getNode() { return node; }

    @ThriftField
    public void setNode(final String node) { this.node = node; }

    private int imageUser;

    @ThriftField(value=8, name="imageUser", requiredness=Requiredness.NONE)
    public int getImageUser() { return imageUser; }

    @ThriftField
    public void setImageUser(final int imageUser) { this.imageUser = imageUser; }

    private String imageDate;

    @ThriftField(value=9, name="imageDate", requiredness=Requiredness.NONE)
    public String getImageDate() { return imageDate; }

    @ThriftField
    public void setImageDate(final String imageDate) { this.imageDate = imageDate; }

    private String businessTypeInfoName;

    @ThriftField(value=10, name="businessTypeInfoName", requiredness=Requiredness.NONE)
    public String getBusinessTypeInfoName() { return businessTypeInfoName; }

    @ThriftField
    public void setBusinessTypeInfoName(final String businessTypeInfoName) { this.businessTypeInfoName = businessTypeInfoName; }

    private String userName;

    @ThriftField(value=11, name="userName", requiredness=Requiredness.NONE)
    public String getUserName() { return userName; }

    @ThriftField
    public void setUserName(final String userName) { this.userName = userName; }

    private String fileCode;

    @ThriftField(value=12, name="fileCode", requiredness=Requiredness.NONE)
    public String getFileCode() { return fileCode; }

    @ThriftField
    public void setFileCode(final String fileCode) { this.fileCode = fileCode; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("imageId", imageId)
            .add("code", code)
            .add("status", status)
            .add("applicationDate", applicationDate)
            .add("businessTypeInfoId", businessTypeInfoId)
            .add("version", version)
            .add("node", node)
            .add("imageUser", imageUser)
            .add("imageDate", imageDate)
            .add("businessTypeInfoName", businessTypeInfoName)
            .add("userName", userName)
            .add("fileCode", fileCode)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ImageInfo other = (ImageInfo)o;

        return
            Objects.equals(imageId, other.imageId) &&
            Objects.equals(code, other.code) &&
            Objects.equals(status, other.status) &&
            Objects.equals(applicationDate, other.applicationDate) &&
            Objects.equals(businessTypeInfoId, other.businessTypeInfoId) &&
            Objects.equals(version, other.version) &&
            Objects.equals(node, other.node) &&
            Objects.equals(imageUser, other.imageUser) &&
            Objects.equals(imageDate, other.imageDate) &&
            Objects.equals(businessTypeInfoName, other.businessTypeInfoName) &&
            Objects.equals(userName, other.userName) &&
            Objects.equals(fileCode, other.fileCode);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            imageId,
            code,
            status,
            applicationDate,
            businessTypeInfoId,
            version,
            node,
            imageUser,
            imageDate,
            businessTypeInfoName,
            userName,
            fileCode
        });
    }
}
