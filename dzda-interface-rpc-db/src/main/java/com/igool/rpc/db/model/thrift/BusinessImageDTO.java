// Generated by swift-generator from dzda/businessimagedto.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("BusinessImageDTO")
public final class BusinessImageDTO  implements Serializable
{
    public BusinessImageDTO() {
    }

    private int businessId;

    @ThriftField(value=1, name="businessId", requiredness=Requiredness.NONE)
    public int getBusinessId() { return businessId; }

    @ThriftField
    public void setBusinessId(final int businessId) { this.businessId = businessId; }

    private int fileId;

    @ThriftField(value=2, name="fileId", requiredness=Requiredness.NONE)
    public int getFileId() { return fileId; }

    @ThriftField
    public void setFileId(final int fileId) { this.fileId = fileId; }

    private String businessType;

    @ThriftField(value=3, name="businessType", requiredness=Requiredness.NONE)
    public String getBusinessType() { return businessType; }

    @ThriftField
    public void setBusinessType(final String businessType) { this.businessType = businessType; }

    private int imageId;

    @ThriftField(value=4, name="imageId", requiredness=Requiredness.NONE)
    public int getImageId() { return imageId; }

    @ThriftField
    public void setImageId(final int imageId) { this.imageId = imageId; }

    private int businessTypeId;

    @ThriftField(value=5, name="businessTypeId", requiredness=Requiredness.NONE)
    public int getBusinessTypeId() { return businessTypeId; }

    @ThriftField
    public void setBusinessTypeId(final int businessTypeId) { this.businessTypeId = businessTypeId; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("businessId", businessId)
            .add("fileId", fileId)
            .add("businessType", businessType)
            .add("imageId", imageId)
            .add("businessTypeId", businessTypeId)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BusinessImageDTO other = (BusinessImageDTO)o;

        return
            Objects.equals(businessId, other.businessId) &&
            Objects.equals(fileId, other.fileId) &&
            Objects.equals(businessType, other.businessType) &&
            Objects.equals(imageId, other.imageId) &&
            Objects.equals(businessTypeId, other.businessTypeId);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            businessId,
            fileId,
            businessType,
            imageId,
            businessTypeId
        });
    }
}
