// Generated by swift-generator from dzda/fileid.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("FileId")
public final class FileId  implements Serializable
{
    public FileId() {
    }

    private int fileId;

    @ThriftField(value=1, name="fileId", requiredness=Requiredness.NONE)
    public int getFileId() { return fileId; }

    @ThriftField
    public void setFileId(final int fileId) { this.fileId = fileId; }

    private String fileCode;

    @ThriftField(value=2, name="fileCode", requiredness=Requiredness.NONE)
    public String getFileCode() { return fileCode; }

    @ThriftField
    public void setFileCode(final String fileCode) { this.fileCode = fileCode; }

    private String box;

    @ThriftField(value=3, name="box", requiredness=Requiredness.NONE)
    public String getBox() { return box; }

    @ThriftField
    public void setBox(final String box) { this.box = box; }

    private String fileIds;

    @ThriftField(value=4, name="fileIds", requiredness=Requiredness.NONE)
    public String getFileIds() { return fileIds; }

    @ThriftField
    public void setFileIds(final String fileIds) { this.fileIds = fileIds; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("fileId", fileId)
            .add("fileCode", fileCode)
            .add("box", box)
            .add("fileIds", fileIds)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        FileId other = (FileId)o;

        return
            Objects.equals(fileId, other.fileId) &&
            Objects.equals(fileCode, other.fileCode) &&
            Objects.equals(box, other.box) &&
            Objects.equals(fileIds, other.fileIds);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            fileId,
            fileCode,
            box,
            fileIds
        });
    }
}
