// Generated by swift-generator from dzda/businesstypeinfo.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("BusinessTypeInfo")
public final class BusinessTypeInfo  implements Serializable
{
    public BusinessTypeInfo() {
    }

    private int businessTypeId;

    @ThriftField(value=1, name="businessTypeId", requiredness=Requiredness.NONE)
    public int getBusinessTypeId() { return businessTypeId; }

    @ThriftField
    public void setBusinessTypeId(final int businessTypeId) { this.businessTypeId = businessTypeId; }

    private String businessType;

    @ThriftField(value=2, name="businessType", requiredness=Requiredness.NONE)
    public String getBusinessType() { return businessType; }

    @ThriftField
    public void setBusinessType(final String businessType) { this.businessType = businessType; }

    private String createDate;

    @ThriftField(value=3, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    private int versions;

    @ThriftField(value=4, name="versions", requiredness=Requiredness.NONE)
    public int getVersions() { return versions; }

    @ThriftField
    public void setVersions(final int versions) { this.versions = versions; }

    private String name;

    @ThriftField(value=5, name="name", requiredness=Requiredness.NONE)
    public String getName() { return name; }

    @ThriftField
    public void setName(final String name) { this.name = name; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("businessTypeId", businessTypeId)
            .add("businessType", businessType)
            .add("createDate", createDate)
            .add("versions", versions)
            .add("name", name)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BusinessTypeInfo other = (BusinessTypeInfo)o;

        return
            Objects.equals(businessTypeId, other.businessTypeId) &&
            Objects.equals(businessType, other.businessType) &&
            Objects.equals(createDate, other.createDate) &&
            Objects.equals(versions, other.versions) &&
            Objects.equals(name, other.name);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            businessTypeId,
            businessType,
            createDate,
            versions,
            name
        });
    }
}
