// Generated by swift-generator from dzda/imagephotorelservice.thrift

package com.igool.rpc.db.service.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;


@ThriftService("ImagePhotoRefService")
public interface ImagePhotoRefService extends Closeable
{
    @ThriftService("ImagePhotoRefService")
    public interface Async extends Closeable
    {
        void close();

        @ThriftMethod(value = "insert")
        ListenableFuture<Void> insert(
            @ThriftField(value=1, name="model", requiredness=Requiredness.NONE) final com.igool.rpc.db.model.thrift.ImagePhotoRel model
        );

        @ThriftMethod(value = "getImagePhotoRelList")
        ListenableFuture<List<com.igool.rpc.db.model.thrift.ImagePhotoRel>> getImagePhotoRelList(
            @ThriftField(value=1, name="imageId", requiredness=Requiredness.NONE) final int imageId
        );

        @ThriftMethod(value = "findImageRelByLshAndBusinessTypeId")
        ListenableFuture<List<com.igool.rpc.db.model.thrift.ImagePhotoRel>> findImageRelByLshAndBusinessTypeId(
            @ThriftField(value=1, name="lsh", requiredness=Requiredness.NONE) final String lsh,
            @ThriftField(value=2, name="businessTypeId", requiredness=Requiredness.NONE) final int businessTypeId
        );

        @ThriftMethod(value = "delImagePhotoRelByLshCodeAndPhotoCode")
        ListenableFuture<Void> delImagePhotoRelByLshCodeAndPhotoCode(
            @ThriftField(value=1, name="lsh", requiredness=Requiredness.NONE) final String lsh,
            @ThriftField(value=2, name="photoCode", requiredness=Requiredness.NONE) final String photoCode
        );

        @ThriftMethod(value = "countImagePhoto")
        ListenableFuture<Integer> countImagePhoto();
    }
    void close();


    @ThriftMethod(value = "insert")
    void insert(
        @ThriftField(value=1, name="model", requiredness=Requiredness.NONE) final com.igool.rpc.db.model.thrift.ImagePhotoRel model
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "getImagePhotoRelList")
    List<com.igool.rpc.db.model.thrift.ImagePhotoRel> getImagePhotoRelList(
        @ThriftField(value=1, name="imageId", requiredness=Requiredness.NONE) final int imageId
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "findImageRelByLshAndBusinessTypeId")
    List<com.igool.rpc.db.model.thrift.ImagePhotoRel> findImageRelByLshAndBusinessTypeId(
        @ThriftField(value=1, name="lsh", requiredness=Requiredness.NONE) final String lsh,
        @ThriftField(value=2, name="businessTypeId", requiredness=Requiredness.NONE) final int businessTypeId
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "delImagePhotoRelByLshCodeAndPhotoCode")
    void delImagePhotoRelByLshCodeAndPhotoCode(
        @ThriftField(value=1, name="lsh", requiredness=Requiredness.NONE) final String lsh,
        @ThriftField(value=2, name="photoCode", requiredness=Requiredness.NONE) final String photoCode
    ) throws org.apache.thrift.TException;

    @ThriftMethod(value = "countImagePhoto")
    int countImagePhoto() throws org.apache.thrift.TException;
}