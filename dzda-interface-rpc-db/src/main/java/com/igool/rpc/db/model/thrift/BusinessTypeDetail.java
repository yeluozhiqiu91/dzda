// Generated by swift-generator from dzda/businesstypedetail.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import java.io.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("BusinessTypeDetail")
public final class BusinessTypeDetail  implements Serializable
{
    public BusinessTypeDetail() {
    }

    private int businessDetailId;

    @ThriftField(value=1, name="businessDetailId", requiredness=Requiredness.NONE)
    public int getBusinessDetailId() { return businessDetailId; }

    @ThriftField
    public void setBusinessDetailId(final int businessDetailId) { this.businessDetailId = businessDetailId; }

    private int businessTypeId;

    @ThriftField(value=2, name="businessTypeId", requiredness=Requiredness.NONE)
    public int getBusinessTypeId() { return businessTypeId; }

    @ThriftField
    public void setBusinessTypeId(final int businessTypeId) { this.businessTypeId = businessTypeId; }

    private String detailName;

    @ThriftField(value=3, name="detailName", requiredness=Requiredness.NONE)
    public String getDetailName() { return detailName; }

    @ThriftField
    public void setDetailName(final String detailName) { this.detailName = detailName; }

    private int imageCount;

    @ThriftField(value=4, name="imageCount", requiredness=Requiredness.NONE)
    public int getImageCount() { return imageCount; }

    @ThriftField
    public void setImageCount(final int imageCount) { this.imageCount = imageCount; }

    private int imageOrder;

    @ThriftField(value=5, name="imageOrder", requiredness=Requiredness.NONE)
    public int getImageOrder() { return imageOrder; }

    @ThriftField
    public void setImageOrder(final int imageOrder) { this.imageOrder = imageOrder; }

    private String detailCoding;

    @ThriftField(value=6, name="detailCoding", requiredness=Requiredness.NONE)
    public String getDetailCoding() { return detailCoding; }

    @ThriftField
    public void setDetailCoding(final String detailCoding) { this.detailCoding = detailCoding; }

    private int isNecessity;

    @ThriftField(value=7, name="isNecessity", requiredness=Requiredness.NONE)
    public int getIsNecessity() { return isNecessity; }

    @ThriftField
    public void setIsNecessity(final int isNecessity) { this.isNecessity = isNecessity; }

    private int isSm;

    @ThriftField(value=8, name="isSm", requiredness=Requiredness.NONE)
    public int getIsSm() { return isSm; }

    @ThriftField
    public void setIsSm(final int isSm) { this.isSm = isSm; }

    private String remark;

    @ThriftField(value=9, name="remark", requiredness=Requiredness.NONE)
    public String getRemark() { return remark; }

    @ThriftField
    public void setRemark(final String remark) { this.remark = remark; }

    private int status;

    @ThriftField(value=10, name="status", requiredness=Requiredness.NONE)
    public int getStatus() { return status; }

    @ThriftField
    public void setStatus(final int status) { this.status = status; }

    private String isQs;

    @ThriftField(value=11, name="isQs", requiredness=Requiredness.NONE)
    public String getIsQs() { return isQs; }

    @ThriftField
    public void setIsQs(final String isQs) { this.isQs = isQs; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("businessDetailId", businessDetailId)
            .add("businessTypeId", businessTypeId)
            .add("detailName", detailName)
            .add("imageCount", imageCount)
            .add("imageOrder", imageOrder)
            .add("detailCoding", detailCoding)
            .add("isNecessity", isNecessity)
            .add("isSm", isSm)
            .add("remark", remark)
            .add("status", status)
            .add("isQs", isQs)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BusinessTypeDetail other = (BusinessTypeDetail)o;

        return
            Objects.equals(businessDetailId, other.businessDetailId) &&
            Objects.equals(businessTypeId, other.businessTypeId) &&
            Objects.equals(detailName, other.detailName) &&
            Objects.equals(imageCount, other.imageCount) &&
            Objects.equals(imageOrder, other.imageOrder) &&
            Objects.equals(detailCoding, other.detailCoding) &&
            Objects.equals(isNecessity, other.isNecessity) &&
            Objects.equals(isSm, other.isSm) &&
            Objects.equals(remark, other.remark) &&
            Objects.equals(status, other.status) &&
            Objects.equals(isQs, other.isQs);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            businessDetailId,
            businessTypeId,
            detailName,
            imageCount,
            imageOrder,
            detailCoding,
            isNecessity,
            isSm,
            remark,
            status,
            isQs
        });
    }
}
