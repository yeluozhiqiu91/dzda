// Generated by swift-generator from dzda/deliveryinfo.thrift

package com.igool.rpc.db.model.thrift;

import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftStruct;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Objects;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("DeliveryInfo")
public final class DeliveryInfo  implements Serializable
{
    public DeliveryInfo() {
    }

    private int deliveryId;

    @ThriftField(value=1, name="deliveryId", requiredness=Requiredness.NONE)
    public int getDeliveryId() { return deliveryId; }

    @ThriftField
    public void setDeliveryId(final int deliveryId) { this.deliveryId = deliveryId; }

    private String code;

    @ThriftField(value=2, name="code", requiredness=Requiredness.NONE)
    public String getCode() { return code; }

    @ThriftField
    public void setCode(final String code) { this.code = code; }

    private int registerPerson;

    @ThriftField(value=3, name="registerPerson", requiredness=Requiredness.NONE)
    public int getRegisterPerson() { return registerPerson; }

    @ThriftField
    public void setRegisterPerson(final int registerPerson) { this.registerPerson = registerPerson; }

    private String registerDate;

    @ThriftField(value=4, name="registerDate", requiredness=Requiredness.NONE)
    public String getRegisterDate() { return registerDate; }

    @ThriftField
    public void setRegisterDate(final String registerDate) { this.registerDate = registerDate; }

    private String createDate;

    @ThriftField(value=5, name="createDate", requiredness=Requiredness.NONE)
    public String getCreateDate() { return createDate; }

    @ThriftField
    public void setCreateDate(final String createDate) { this.createDate = createDate; }

    private int jjlx;

    @ThriftField(value=6, name="jjlx", requiredness=Requiredness.NONE)
    public int getJjlx() { return jjlx; }

    @ThriftField
    public void setJjlx(final int jjlx) { this.jjlx = jjlx; }

    private String registerPersonName;

    @ThriftField(value=7, name="registerPersonName", requiredness=Requiredness.NONE)
    public String getRegisterPersonName() { return registerPersonName; }

    @ThriftField
    public void setRegisterPersonName(final String registerPersonName) { this.registerPersonName = registerPersonName; }

    private String box;

    @ThriftField(value=8, name="box", requiredness=Requiredness.NONE)
    public String getBox() { return box; }

    @ThriftField
    public void setBox(final String box) { this.box = box; }

    private int signPerson;

    @ThriftField(value=9, name="signPerson", requiredness=Requiredness.NONE)
    public int getSignPerson() { return signPerson; }

    @ThriftField
    public void setSignPerson(final int signPerson) { this.signPerson = signPerson; }

    private String signPersonName;

    @ThriftField(value=10, name="signPersonName", requiredness=Requiredness.NONE)
    public String getSignPersonName() { return signPersonName; }

    @ThriftField
    public void setSignPersonName(final String signPersonName) { this.signPersonName = signPersonName; }

    private int status;

    @ThriftField(value=11, name="status", requiredness=Requiredness.NONE)
    public int getStatus() { return status; }

    @ThriftField
    public void setStatus(final int status) { this.status = status; }

    private String statusStr;

    @ThriftField(value=12, name="statusStr", requiredness=Requiredness.NONE)
    public String getStatusStr() { return statusStr; }

    @ThriftField
    public void setStatusStr(final String statusStr) { this.statusStr = statusStr; }

    private String receiverName;

    @ThriftField(value=13, name="receiverName", requiredness=Requiredness.NONE)
    public String getReceiverName() { return receiverName; }

    @ThriftField
    public void setReceiverName(final String receiverName) { this.receiverName = receiverName; }

    private int count;

    @ThriftField(value=14, name="count", requiredness=Requiredness.NONE)
    public int getCount() { return count; }

    @ThriftField
    public void setCount(final int count) { this.count = count; }

    private int realJjlx;

    @ThriftField(value=15, name="realJjlx", requiredness=Requiredness.NONE)
    public int getRealJjlx() { return realJjlx; }

    @ThriftField
    public void setRealJjlx(final int realJjlx) { this.realJjlx = realJjlx; }

    private int signingId;

    @ThriftField(value=16, name="signingId", requiredness=Requiredness.NONE)
    public int getSigningId() { return signingId; }

    @ThriftField
    public void setSigningId(final int signingId) { this.signingId = signingId; }

    private int businessId;

    @ThriftField(value=17, name="businessId", requiredness=Requiredness.NONE)
    public int getBusinessId() { return businessId; }

    @ThriftField
    public void setBusinessId(final int businessId) { this.businessId = businessId; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("deliveryId", deliveryId)
            .add("code", code)
            .add("registerPerson", registerPerson)
            .add("registerDate", registerDate)
            .add("createDate", createDate)
            .add("jjlx", jjlx)
            .add("registerPersonName", registerPersonName)
            .add("box", box)
            .add("signPerson", signPerson)
            .add("signPersonName", signPersonName)
            .add("status", status)
            .add("statusStr", statusStr)
            .add("receiverName", receiverName)
            .add("count", count)
            .add("realJjlx", realJjlx)
            .add("signingId", signingId)
            .add("businessId", businessId)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        DeliveryInfo other = (DeliveryInfo)o;

        return
            Objects.equals(deliveryId, other.deliveryId) &&
            Objects.equals(code, other.code) &&
            Objects.equals(registerPerson, other.registerPerson) &&
            Objects.equals(registerDate, other.registerDate) &&
            Objects.equals(createDate, other.createDate) &&
            Objects.equals(jjlx, other.jjlx) &&
            Objects.equals(registerPersonName, other.registerPersonName) &&
            Objects.equals(box, other.box) &&
            Objects.equals(signPerson, other.signPerson) &&
            Objects.equals(signPersonName, other.signPersonName) &&
            Objects.equals(status, other.status) &&
            Objects.equals(statusStr, other.statusStr) &&
            Objects.equals(receiverName, other.receiverName) &&
            Objects.equals(count, other.count) &&
            Objects.equals(realJjlx, other.realJjlx) &&
            Objects.equals(signingId, other.signingId) &&
            Objects.equals(businessId, other.businessId);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            deliveryId,
            code,
            registerPerson,
            registerDate,
            createDate,
            jjlx,
            registerPersonName,
            box,
            signPerson,
            signPersonName,
            status,
            statusStr,
            receiverName,
            count,
            realJjlx,
            signingId,
            businessId
        });
    }
}
